on:
  workflow_call:
    inputs:
      cache:
        type: boolean
        default: true
        description: Whether to enable image layer cache.
      cache-tag:
        type: string
        default: buildcache
        description: Image tag to use for image layer cache.
      context:
        type: string
        default: "."
        description: The root directory for the Docker build context.
      dockerfile:
        type: string
        default: Dockerfile
        description: Path to a Dockerfile relative to the Docker build context path.
      git-ref:
        type: string
        default: ""
        description: The branch, tag or SHA to checkout. Leave empty for the current branch ref.
      git-submodules:
        type: boolean
        default: false
        description: Whether to also checkout Git submodules.
      push:
        type: boolean
        default: true
        description: Push a successfully built image to a registry.
      name:
        type: string
        description: Image name (repository path) within a registry.
        required: true
      tag-branch:
        type: boolean
        default: false
        description: Tag a successfully built image with the branch name.
      tag-sha:
        type: boolean
        default: true
        description: Tag a successfully built image with the commit SHA that triggered the workflow.
      tag-pr:
        type: boolean
        default: true
        description: Tag a successfully built image with reference to a Pull Request, e.g. pr-2.
      tag-latest:
        type: boolean
        default: false
        description: Tag a successfully built image with the tag latest.
      tag-extra:
        type: string
        default: ""
        description: Comma-separated list of additional image tags.
      registry-url:
        type: string
        description: URL to the container registry.
        required: true
      runs-on:
        type: string
        default: "['self-hosted']"
        description: Type of runner for the jobs. For non-self-hosted runners, use ubuntu-latest for example.
      trivy-enabled:
        type: boolean
        default: true
        description: Scan the built image for known vulnerabilities using Trivy.
      trivy-error-is-success:
        type: boolean
        default: false
        description: Do not produce an error if the Trivy scan fails. Primarily used for testing.
      trivy-ignore-unfixed:
        type: boolean
        default: true
        description: Ignore errors that do not have a known fix.
      trivy-ignore-files:
        type: string
        default: ""
        description: Comma-separated list of paths to Trivy ignore files, relative to the repository root.
      trivy-severity:
        type: string
        default: MEDIUM,HIGH,CRITICAL
        description: Comma-separated list of severities to consider an error.
      trivy-summary-enabled:
        type: boolean
        default: false
        description: Render a table of all the Trivy findings in the GitHub summary for the workflow.
      trivy-sbom-enabled:
        type: boolean
        default: false
        description: Generate an SBOM of your dependencies and submit them to GitHub Dependency Graph.
    secrets:
      git-ssh-key:
        description: SSH key used by Git to checkout the repository.
        required: false
      registry-username:
        description: Username for the container registry.
        required: true
      registry-password:
        description: Password for the container registry.
        required: true
      token:
        description: GitHub auth token.
        required: true
    outputs:
      image-digest:
        description: The image digest for this build.
        value: ${{ jobs.build.outputs.image-digest }}
      image-ref:
        description: An image reference for this build (`<name>:<git-sha>@<digest>`).
        value: ${{ jobs.build.outputs.image-ref }}
      image-ref-stripped:
        description: An image reference for this build, stripped of its registry URL (`<name>:<git-sha>@<digest>`).
        value: ${{ jobs.build.outputs.image-ref-stripped }}
      image-tags:
        description: Comma-separated list of generated image tags for this build, (`<registry-url>/<name1>:<tag1>,<registry-url>/<name1>:<tag2>`).
        value: ${{ jobs.build.outputs.image-tags }}
      image-tags-stripped:
        description: Comma-separated list of generated image tags for this build, stripped of their registry URL, without a leading slash (`<name1>:<tag1>,<name1>:<tag2>`).
        value: ${{ jobs.build.outputs.image-tags-stripped }}
      unique-id:
        description: A generated unique ID for this run. Can be useful when debugging runners to determine artifact filenames.
        value: ${{ jobs.build.outputs.unique-id }}

jobs:
  build:
    name: Build and push
    runs-on: ${{ fromJson(inputs.runs-on) }}
    steps:

      #
      # Build
      #

      -
        # A unique ID used to name artifacts produced.
        # At least on self-hosted runners, we seem to share the workspace directory
        # leading to race conditions if multiple instances of this workflow are
        # running in parallel within the same run.
        name: Set environment
        id: setup
        run: |
          echo "unique-id=$(date +%Y-%m-%d)-${{ github.sha }}-$(openssl rand -hex 20)" >> $GITHUB_OUTPUT
          if [[ "${{ secrets.registry-username }}" != "" ]]
          then
            echo "docker_login=yes" >> $GITHUB_OUTPUT
          fi
      -
        name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.git-ref }}
          token: ${{ secrets.token }}
          submodules: ${{ inputs.git-submodules }}
          ssh-key: ${{ secrets.git-ssh-key }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.10.0
      -
        if: steps.setup.outputs.docker_login == 'yes'
        name: Docker login
        uses: docker/login-action@v2.2.0
        with:
          registry: ${{ inputs.registry-url }}
          username: ${{ secrets.registry-username }}
          password: ${{ secrets.registry-password }}
      -
        if: inputs.cache == false
        name: Build (no cache)
        uses: docker/build-push-action@v4.1.1
        with:
          file: ${{ inputs.context }}/${{ inputs.dockerfile }}
          context: ${{ inputs.context }}
          push: false
          pull: true
          tags: ${{ inputs.name }}:${{ steps.setup.outputs.unique-id }}
          outputs: type=docker
      -
        if: inputs.cache == true
        name: Build (with cache)
        uses: docker/build-push-action@v4.1.1
        with:
          file: ${{ inputs.context }}/${{ inputs.dockerfile }}
          context: ${{ inputs.context }}
          push: false
          pull: true
          tags: ${{ inputs.name }}:${{ steps.setup.outputs.unique-id }}
          outputs: type=docker
          cache-from: type=registry,ref=${{ inputs.registry-url }}/${{ inputs.name }}:${{ inputs.cache-tag }}
          cache-to: type=registry,ref=${{ inputs.registry-url }}/${{ inputs.name }}:${{ inputs.cache-tag }},mode=max,ignore-error=true

      #
      # Vulnerability scan
      #

      -
        name: Configure Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      -
        if: inputs.trivy-enabled && inputs.trivy-summary-enabled
        name: Scan for vulnerabilities (table format)
        uses: aquasecurity/trivy-action@0.12.0
        with:
          exit-code: '0'
          hide-progress: false
          ignore-unfixed: ${{ inputs.trivy-ignore-unfixed }}
          image-ref: ${{ inputs.name }}:${{ steps.setup.outputs.unique-id }}
          output: ${{ steps.setup.outputs.unique-id }}-trivy-scan-result.txt
          scanners: vuln,config
          severity: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
          trivyignores: ${{ inputs.trivy-ignore-files }}
          vuln-type: os,library
      -
        if: inputs.trivy-enabled && inputs.trivy-summary-enabled
        name: Post all scan results to Github Summary as a table
        env:
          CODE_BLOCK: "```"
        run: |
          echo "# Trivy scan results" >> $GITHUB_STEP_SUMMARY

          echo $CODE_BLOCK >> $GITHUB_STEP_SUMMARY
          cat ${{ steps.setup.outputs.unique-id }}-trivy-scan-result.txt >> $GITHUB_STEP_SUMMARY
          echo $CODE_BLOCK >> $GITHUB_STEP_SUMMARY
      -
        if: inputs.trivy-sbom-enabled
        name: Run Trivy in GitHub SBOM mode and submit results to Dependency Graph
        uses: aquasecurity/trivy-action@0.12.0
        with:
          format: github
          hide-progress: false
          output: 'dependency-results.sbom.json'
          image-ref: ${{ inputs.name }}:${{ steps.setup.outputs.unique-id }}
          github-pat: ${{ secrets.GITHUB_TOKEN }}
      -
        if: inputs.trivy-enabled
        name: Scan for vulnerabilities
        uses: aquasecurity/trivy-action@0.12.0
        with:
          exit-code: '0'
          format: json
          hide-progress: false
          ignore-unfixed: ${{ inputs.trivy-ignore-unfixed }}
          image-ref: ${{ inputs.name }}:${{ steps.setup.outputs.unique-id }}
          output: ${{ steps.setup.outputs.unique-id }}-trivy-scan-result.json
          scanners: vuln,config
          severity: ${{ inputs.trivy-severity }}
          trivyignores: ${{ inputs.trivy-ignore-files }}
          vuln-type: os,library
      -
        if: inputs.trivy-enabled
        name: Parse vulnerability scan results
        continue-on-error: ${{ inputs.trivy-error-is-success }}
        shell: python
        env:
          RESULT_FILENAME: ${{ steps.setup.outputs.unique-id }}-trivy-scan-result.json
        id: parse
        run: |
          import json
          import os
          import sys

          with open(os.getenv("RESULT_FILENAME"), "r") as f:
              data = json.load(f)

          exit_code = 0
          for result in data.get("Results", []):
              for vuln in result.get("Vulnerabilities", []):
                  # Severity to report to GitHub
                  sev = "error" if vuln.get("Severity") in ("HIGH", "CRITICAL") else "warning"
                  msg = f"{vuln.get('Severity')} {vuln.get('VulnerabilityID')} {vuln.get('PkgName')}: {vuln.get('Title')} ({vuln.get('PrimaryURL')})"
                  print(f"::{sev} ::{msg}")

                  # Since severity filter is set at job level, we can exit non-zero for all
                  # issues regardless of severity and let workflow consumers decide which
                  # severity levels to care about.
                  exit_code = 2

          with open(os.getenv("GITHUB_OUTPUT"), 'a') as f:
            print(f"exit-code={exit_code}", file=f)
          print("Raw results:")
          json.dump(data, sys.stdout)
          sys.exit(exit_code)
      -
        if: inputs.trivy-enabled && inputs.trivy-error-is-success
        name: Test results
        run: |
          test "x${{ steps.parse.outputs.exit-code }}" = "x2"

      #
      # Push
      #

      -
        name: Build list of additional tags
        id: additional-tags
        uses: actions/github-script@v6.4.1
        with:
          script: |
            core.setOutput('tags', `${{ inputs.tag-extra }}`.split(",").join("\n"))
      -
        name: Generate image tags
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: |
            ${{ inputs.registry-url }}/${{ inputs.name }}
          tags: |
            type=ref,event=pr,enable=${{ inputs.tag-pr }}
            type=ref,event=branch,enable=${{ inputs.tag-branch }}
            type=raw,value=${{ github.sha }},enable=${{ inputs.tag-sha }}
            type=raw,value=latest,enable=${{ inputs.tag-latest }}
            ${{ steps.additional-tags.outputs.tags }}
      -
        if: inputs.push && steps.setup.outputs.docker_login == 'yes'
        name: Push tags
        id: push
        run: |
          echo "### Tags" >> $GITHUB_STEP_SUMMARY

          export IMAGE='${{ inputs.name }}:${{ steps.setup.outputs.unique-id }}'
          export TAGS='${{ join(fromJSON(steps.meta.outputs.json).tags, ' ') }}'

          digest=""
          tags=""
          tags_stripped=""
          for tag in $TAGS
          do
            docker tag "$IMAGE" $tag

            # Capture the image digest. Doesn't matter that it gets overwritten
            # every iteration, as they are all the same.
            digest=$(docker push $tag | tee | grep -oP 'digest: \K(sha256:[0-9a-f]*)')

            # Collect all tags, both stripped of the registry URL and not.
            tags+="${tag},"
            stripped=${tag#"${{ inputs.registry-url }}/"}
            tags_stripped+="${stripped},"

            # Add tag to summary output
            echo "- \`${tag}\`" >> $GITHUB_STEP_SUMMARY
          done
          echo >> $GITHUB_STEP_SUMMARY

          # Remove trailing comma before setting as output var
          echo "image-tags=$(echo "$tags" | sed 's|,*$||')" >> $GITHUB_OUTPUT
          echo "image-tags-stripped=$(echo "$tags_stripped" | sed 's|,*$||')" >> $GITHUB_OUTPUT
          echo "image-digest=${digest}" >> $GITHUB_OUTPUT

          echo "### Digest" >> $GITHUB_STEP_SUMMARY
          echo "- \`$digest\`" >> $GITHUB_STEP_SUMMARY
          echo >> $GITHUB_STEP_SUMMARY

          echo "### Image reference" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ inputs.registry-url }}/${{ inputs.name }}:${{ github.sha }}@${digest}\`" >> $GITHUB_STEP_SUMMARY
    outputs:
      image-digest: ${{ steps.push.outputs.image-digest }}
      image-ref: ${{ inputs.registry-url }}/${{ inputs.name }}:${{ github.sha }}@${{ steps.push.outputs.image-digest }}
      image-ref-stripped: ${{ inputs.name }}:${{ github.sha }}@${{ steps.push.outputs.image-digest }}
      image-tags: ${{ steps.push.outputs.image-tags }}
      image-tags-stripped: ${{ steps.push.outputs.image-tags-stripped }}
      unique-id: ${{ steps.setup.outputs.unique-id }}
